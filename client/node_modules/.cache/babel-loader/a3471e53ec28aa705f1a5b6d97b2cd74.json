{"ast":null,"code":"/*!\n* tabbable 6.1.1\n* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE\n*/\n// NOTE: separate `:not()` selectors has broader browser support than the newer\n//  `:not([inert], [inert] *)` (Feb 2023)\n// CAREFUL: JSDom does not support `:not([inert] *)` as a selector; using it causes\n//  the entire query to fail, resulting in no nodes found, which will break a lot\n//  of things... so we have to rely on JS to identify nodes inside an inert container\nvar candidateSelectors = ['input:not([inert])', 'select:not([inert])', 'textarea:not([inert])', 'a[href]:not([inert])', 'button:not([inert])', '[tabindex]:not(slot):not([inert])', 'audio[controls]:not([inert])', 'video[controls]:not([inert])', '[contenteditable]:not([contenteditable=\"false\"]):not([inert])', 'details>summary:first-of-type:not([inert])', 'details:not([inert])'];\nvar candidateSelector = /* #__PURE__ */candidateSelectors.join(',');\nvar NoElement = typeof Element === 'undefined';\nvar matches = NoElement ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\nvar getRootNode = !NoElement && Element.prototype.getRootNode ? function (element) {\n  var _element$getRootNode;\n\n  return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);\n} : function (element) {\n  return element === null || element === void 0 ? void 0 : element.ownerDocument;\n};\n/**\n * Determines if a node is inert or in an inert ancestor.\n * @param {Element} [node]\n * @param {boolean} [lookUp] If true and `node` is not inert, looks up at ancestors to\n *  see if any of them are inert. If false, only `node` itself is considered.\n * @returns {boolean} True if inert itself or by way of being in an inert ancestor.\n *  False if `node` is falsy.\n */\n\nvar isInert = function isInert(node, lookUp) {\n  var _node$getAttribute;\n\n  if (lookUp === void 0) {\n    lookUp = true;\n  } // CAREFUL: JSDom does not support inert at all, so we can't use the `HTMLElement.inert`\n  //  JS API property; we have to check the attribute, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's an active element\n\n\n  var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, 'inert');\n  var inert = inertAtt === '' || inertAtt === 'true'; // NOTE: this could also be handled with `node.matches('[inert], :is([inert] *)')`\n  //  if it weren't for `matches()` not being a function on shadow roots; the following\n  //  code works for any kind of node\n  // CAREFUL: JSDom does not appear to support certain selectors like `:not([inert] *)`\n  //  so it likely would not support `:is([inert] *)` either...\n\n  var result = inert || lookUp && node && isInert(node.parentNode); // recursive\n\n  return result;\n};\n/**\n * Determines if a node's content is editable.\n * @param {Element} [node]\n * @returns True if it's content-editable; false if it's not or `node` is falsy.\n */\n\n\nvar isContentEditable = function isContentEditable(node) {\n  var _node$getAttribute2; // CAREFUL: JSDom does not support the `HTMLElement.isContentEditable` API so we have\n  //  to use the attribute directly to check for this, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's a non-editable element\n\n\n  var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, 'contenteditable');\n  return attValue === '' || attValue === 'true';\n};\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\n\n\nvar getCandidates = function getCandidates(el, includeContainer, filter) {\n  // even if `includeContainer=false`, we still have to check it for inertness because\n  //  if it's inert, all its children are inert\n  if (isInert(el)) {\n    return [];\n  }\n\n  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));\n\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidateScope\n * @property {Element} scopeParent contains inner candidates\n * @property {Element[]} candidates list of candidates found in the scope parent\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidateScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidateScope>}\n */\n\n\nvar getCandidatesIteratively = function getCandidatesIteratively(elements, includeContainer, options) {\n  var candidates = [];\n  var elementsToCheck = Array.from(elements);\n\n  while (elementsToCheck.length) {\n    var element = elementsToCheck.shift();\n\n    if (isInert(element, false)) {\n      // no need to look up since we're drilling down\n      // anything inside this container will also be inert\n      continue;\n    }\n\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      var assigned = element.assignedElements();\n      var content = assigned.length ? assigned : element.children;\n      var nestedCandidates = getCandidatesIteratively(content, true, options);\n\n      if (options.flatten) {\n        candidates.push.apply(candidates, nestedCandidates);\n      } else {\n        candidates.push({\n          scopeParent: element,\n          candidates: nestedCandidates\n        });\n      }\n    } else {\n      // check candidate element\n      var validCandidate = matches.call(element, candidateSelector);\n\n      if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {\n        candidates.push(element);\n      } // iterate over shadow content if possible\n\n\n      var shadowRoot = element.shadowRoot || // check for an undisclosed shadow\n      typeof options.getShadowRoot === 'function' && options.getShadowRoot(element); // no inert look up because we're already drilling down and checking for inertness\n      //  on the way down, so all containers to this root node should have already been\n      //  vetted as non-inert\n\n      var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));\n\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        var _nestedCandidates = getCandidatesIteratively(shadowRoot === true ? element.children : shadowRoot.children, true, options);\n\n        if (options.flatten) {\n          candidates.push.apply(candidates, _nestedCandidates);\n        } else {\n          candidates.push({\n            scopeParent: element,\n            candidates: _nestedCandidates\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift.apply(elementsToCheck, element.children);\n      }\n    }\n  }\n\n  return candidates;\n};\n\nvar getTabindex = function getTabindex(node, isScope) {\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    //\n    // isScope is positive for custom element with shadow root or slot that by default\n    // have tabIndex -1, but need to be sorted by document order in order for their\n    // content to be inserted in the correct position\n    if ((isScope || /^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && isNaN(parseInt(node.getAttribute('tabindex'), 10))) {\n      return 0;\n    }\n  }\n\n  return node.tabIndex;\n};\n\nvar sortOrderedTabbables = function sortOrderedTabbables(a, b) {\n  return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;\n};\n\nvar isInput = function isInput(node) {\n  return node.tagName === 'INPUT';\n};\n\nvar isHiddenInput = function isHiddenInput(node) {\n  return isInput(node) && node.type === 'hidden';\n};\n\nvar isDetailsWithSummary = function isDetailsWithSummary(node) {\n  var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {\n    return child.tagName === 'SUMMARY';\n  });\n  return r;\n};\n\nvar getCheckedRadio = function getCheckedRadio(nodes, form) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\n\nvar isTabbableRadio = function isTabbableRadio(node) {\n  if (!node.name) {\n    return true;\n  }\n\n  var radioScope = node.form || getRootNode(node);\n\n  var queryRadios = function queryRadios(name) {\n    return radioScope.querySelectorAll('input[type=\"radio\"][name=\"' + name + '\"]');\n  };\n\n  var radioSet;\n\n  if (typeof window !== 'undefined' && typeof window.CSS !== 'undefined' && typeof window.CSS.escape === 'function') {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s', err.message);\n      return false;\n    }\n  }\n\n  var checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\n\nvar isRadio = function isRadio(node) {\n  return isInput(node) && node.type === 'radio';\n};\n\nvar isNonTabbableRadio = function isNonTabbableRadio(node) {\n  return isRadio(node) && !isTabbableRadio(node);\n}; // determines if a node is ultimately attached to the window's document\n\n\nvar isNodeAttached = function isNodeAttached(node) {\n  var _nodeRoot; // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // To further complicate things, we have to look all the way up until we find a shadow HOST\n  //  that is attached (or find none) because the node might be in nested shadows...\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n  // NOTE: If `nodeRootHost` or `node` happens to be the `document` itself (which is possible\n  //  if a tabbable/focusable node was quickly added to the DOM, focused, and then removed\n  //  from the DOM as in https://github.com/focus-trap/focus-trap-react/issues/905), then\n  //  `ownerDocument` will be `null`, hence the optional chaining on it.\n\n\n  var nodeRoot = node && getRootNode(node);\n  var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host; // in some cases, a detached node will return itself as the root instead of a document or\n  //  shadow root object, in which case, we shouldn't try to look further up the host chain\n\n  var attached = false;\n\n  if (nodeRoot && nodeRoot !== node) {\n    var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;\n\n    attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));\n\n    while (!attached && nodeRootHost) {\n      var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD; // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,\n      //  which means we need to get the host's host and check if that parent host is contained\n      //  in (i.e. attached to) the document\n\n\n      nodeRoot = getRootNode(nodeRootHost);\n      nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;\n      attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));\n    }\n  }\n\n  return attached;\n};\n\nvar isZeroArea = function isZeroArea(node) {\n  var _node$getBoundingClie = node.getBoundingClientRect(),\n      width = _node$getBoundingClie.width,\n      height = _node$getBoundingClie.height;\n\n  return width === 0 && height === 0;\n};\n\nvar isHidden = function isHidden(node, _ref) {\n  var displayCheck = _ref.displayCheck,\n      getShadowRoot = _ref.getShadowRoot; // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n\n  var isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  }\n\n  if (!displayCheck || displayCheck === 'full' || displayCheck === 'legacy-full') {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      var originalNode = node;\n\n      while (node) {\n        var parentElement = node.parentElement;\n        var rootNode = getRootNode(node);\n\n        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n\n      node = originalNode;\n    } // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n\n    if (isNodeAttached(node)) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    } // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n    //\n    // v6.0.0: As of this major release, the default 'full' option __no longer treats detached\n    //  nodes as visible with the 'none' fallback.__\n\n\n    if (displayCheck !== 'legacy-full') {\n      return true; // hidden\n    } // else, fallback to 'none' mode and consider the node visible\n\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  } // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume\n  //  it's visible\n\n\n  return false;\n}; // form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\n\n\nvar isDisabledFromFieldset = function isDisabledFromFieldset(node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    var parentNode = node.parentElement; // check if `node` is contained in a disabled <fieldset>\n\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (var i = 0; i < parentNode.children.length; i++) {\n          var child = parentNode.children.item(i); // when the first <legend> (in document order) is found\n\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *') ? true : !child.contains(node);\n          }\n        } // the disabled <fieldset> containing `node` has no <legend>\n\n\n        return true;\n      }\n\n      parentNode = parentNode.parentElement;\n    }\n  } // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n\n\n  return false;\n};\n\nvar isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {\n  if (node.disabled || // we must do an inert look up to filter out any elements inside an inert ancestor\n  //  because we're limited in the type of selectors we can use in JSDom (see related\n  //  note related to `candidateSelectors`)\n  isInert(node) || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus\n  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {\n    return false;\n  }\n\n  return true;\n};\n\nvar isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable(options, node) {\n  if (isNonTabbableRadio(node) || getTabindex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {\n    return false;\n  }\n\n  return true;\n};\n\nvar isValidShadowRootTabbable = function isValidShadowRootTabbable(shadowHostNode) {\n  var tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  } // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n\n\n  return false;\n};\n/**\n * @param {Array.<Element|CandidateScope>} candidates\n * @returns Element[]\n */\n\n\nvar sortByOrder = function sortByOrder(candidates) {\n  var regularTabbables = [];\n  var orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    var isScope = !!item.scopeParent;\n    var element = isScope ? item.scopeParent : item;\n    var candidateTabindex = getTabindex(element, isScope);\n    var elements = isScope ? sortByOrder(item.candidates) : element;\n\n    if (candidateTabindex === 0) {\n      isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements\n      });\n    }\n  });\n  return orderedTabbables.sort(sortOrderedTabbables).reduce(function (acc, sortable) {\n    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);\n    return acc;\n  }, []).concat(regularTabbables);\n};\n\nvar tabbable = function tabbable(el, options) {\n  options = options || {};\n  var candidates;\n\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorTabbable.bind(null, options),\n      flatten: false,\n      getShadowRoot: options.getShadowRoot,\n      shadowRootFilter: isValidShadowRootTabbable\n    });\n  } else {\n    candidates = getCandidates(el, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));\n  }\n\n  return sortByOrder(candidates);\n};\n\nvar focusable = function focusable(el, options) {\n  options = options || {};\n  var candidates;\n\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorFocusable.bind(null, options),\n      flatten: true,\n      getShadowRoot: options.getShadowRoot\n    });\n  } else {\n    candidates = getCandidates(el, options.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options));\n  }\n\n  return candidates;\n};\n\nvar isTabbable = function isTabbable(node, options) {\n  options = options || {};\n\n  if (!node) {\n    throw new Error('No node provided');\n  }\n\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n\n  return isNodeMatchingSelectorTabbable(options, node);\n};\n\nvar focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');\n\nvar isFocusable = function isFocusable(node, options) {\n  options = options || {};\n\n  if (!node) {\n    throw new Error('No node provided');\n  }\n\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n\n  return isNodeMatchingSelectorFocusable(options, node);\n};\n\nexport { focusable, isFocusable, isTabbable, tabbable };","map":{"version":3,"mappings":"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","names":["candidateSelectors","candidateSelector","join","NoElement","Element","matches","prototype","msMatchesSelector","webkitMatchesSelector","getRootNode","element","_element$getRootNode","ownerDocument","isInert","node","lookUp","inertAtt","getAttribute","inert","result","parentNode","isContentEditable","attValue","getCandidates","el","includeContainer","filter","candidates","Array","slice","apply","querySelectorAll","call","unshift","getCandidatesIteratively","elements","options","elementsToCheck","from","length","shift","tagName","assigned","assignedElements","content","children","nestedCandidates","flatten","push","scopeParent","validCandidate","includes","shadowRoot","getShadowRoot","validShadowRoot","shadowRootFilter","getTabindex","isScope","tabIndex","test","isNaN","parseInt","sortOrderedTabbables","a","b","documentOrder","isInput","isHiddenInput","type","isDetailsWithSummary","r","some","child","getCheckedRadio","nodes","form","i","checked","isTabbableRadio","name","radioScope","queryRadios","radioSet","window","CSS","escape","err","console","error","message","isRadio","isNonTabbableRadio","isNodeAttached","nodeRoot","nodeRootHost","_nodeRoot","host","attached","_nodeRootHost","contains","_nodeRootHost2$ownerD","isZeroArea","getBoundingClientRect","width","height","isHidden","_ref","displayCheck","getComputedStyle","visibility","isDirectSummary","nodeUnderDetails","parentElement","originalNode","rootNode","assignedSlot","getClientRects","isDisabledFromFieldset","disabled","item","isNodeMatchingSelectorFocusable","isNodeMatchingSelectorTabbable","isValidShadowRootTabbable","shadowHostNode","sortByOrder","regularTabbables","orderedTabbables","forEach","candidateTabindex","sort","reduce","acc","sortable","concat","tabbable","bind","focusable","isTabbable","Error","focusableCandidateSelector","isFocusable"],"sources":["C:\\Users\\Dell\\MERN-authentication-profile\\client\\node_modules\\tabbable\\src\\index.js"],"sourcesContent":["// NOTE: separate `:not()` selectors has broader browser support than the newer\n//  `:not([inert], [inert] *)` (Feb 2023)\n// CAREFUL: JSDom does not support `:not([inert] *)` as a selector; using it causes\n//  the entire query to fail, resulting in no nodes found, which will break a lot\n//  of things... so we have to rely on JS to identify nodes inside an inert container\nconst candidateSelectors = [\n  'input:not([inert])',\n  'select:not([inert])',\n  'textarea:not([inert])',\n  'a[href]:not([inert])',\n  'button:not([inert])',\n  '[tabindex]:not(slot):not([inert])',\n  'audio[controls]:not([inert])',\n  'video[controls]:not([inert])',\n  '[contenteditable]:not([contenteditable=\"false\"]):not([inert])',\n  'details>summary:first-of-type:not([inert])',\n  'details:not([inert])',\n];\nconst candidateSelector = /* #__PURE__ */ candidateSelectors.join(',');\n\nconst NoElement = typeof Element === 'undefined';\n\nconst matches = NoElement\n  ? function () {}\n  : Element.prototype.matches ||\n    Element.prototype.msMatchesSelector ||\n    Element.prototype.webkitMatchesSelector;\n\nconst getRootNode =\n  !NoElement && Element.prototype.getRootNode\n    ? (element) => element?.getRootNode?.()\n    : (element) => element?.ownerDocument;\n\n/**\n * Determines if a node is inert or in an inert ancestor.\n * @param {Element} [node]\n * @param {boolean} [lookUp] If true and `node` is not inert, looks up at ancestors to\n *  see if any of them are inert. If false, only `node` itself is considered.\n * @returns {boolean} True if inert itself or by way of being in an inert ancestor.\n *  False if `node` is falsy.\n */\nconst isInert = function (node, lookUp = true) {\n  // CAREFUL: JSDom does not support inert at all, so we can't use the `HTMLElement.inert`\n  //  JS API property; we have to check the attribute, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's an active element\n  const inertAtt = node?.getAttribute?.('inert');\n  const inert = inertAtt === '' || inertAtt === 'true';\n\n  // NOTE: this could also be handled with `node.matches('[inert], :is([inert] *)')`\n  //  if it weren't for `matches()` not being a function on shadow roots; the following\n  //  code works for any kind of node\n  // CAREFUL: JSDom does not appear to support certain selectors like `:not([inert] *)`\n  //  so it likely would not support `:is([inert] *)` either...\n  const result = inert || (lookUp && node && isInert(node.parentNode)); // recursive\n\n  return result;\n};\n\n/**\n * Determines if a node's content is editable.\n * @param {Element} [node]\n * @returns True if it's content-editable; false if it's not or `node` is falsy.\n */\nconst isContentEditable = function (node) {\n  // CAREFUL: JSDom does not support the `HTMLElement.isContentEditable` API so we have\n  //  to use the attribute directly to check for this, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's a non-editable element\n  const attValue = node?.getAttribute?.('contenteditable');\n  return attValue === '' || attValue === 'true';\n};\n\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\nconst getCandidates = function (el, includeContainer, filter) {\n  // even if `includeContainer=false`, we still have to check it for inertness because\n  //  if it's inert, all its children are inert\n  if (isInert(el)) {\n    return [];\n  }\n\n  let candidates = Array.prototype.slice.apply(\n    el.querySelectorAll(candidateSelector)\n  );\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidateScope\n * @property {Element} scopeParent contains inner candidates\n * @property {Element[]} candidates list of candidates found in the scope parent\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidateScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidateScope>}\n */\nconst getCandidatesIteratively = function (\n  elements,\n  includeContainer,\n  options\n) {\n  const candidates = [];\n  const elementsToCheck = Array.from(elements);\n  while (elementsToCheck.length) {\n    const element = elementsToCheck.shift();\n    if (isInert(element, false)) {\n      // no need to look up since we're drilling down\n      // anything inside this container will also be inert\n      continue;\n    }\n\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      const assigned = element.assignedElements();\n      const content = assigned.length ? assigned : element.children;\n      const nestedCandidates = getCandidatesIteratively(content, true, options);\n      if (options.flatten) {\n        candidates.push(...nestedCandidates);\n      } else {\n        candidates.push({\n          scopeParent: element,\n          candidates: nestedCandidates,\n        });\n      }\n    } else {\n      // check candidate element\n      const validCandidate = matches.call(element, candidateSelector);\n      if (\n        validCandidate &&\n        options.filter(element) &&\n        (includeContainer || !elements.includes(element))\n      ) {\n        candidates.push(element);\n      }\n\n      // iterate over shadow content if possible\n      const shadowRoot =\n        element.shadowRoot ||\n        // check for an undisclosed shadow\n        (typeof options.getShadowRoot === 'function' &&\n          options.getShadowRoot(element));\n\n      // no inert look up because we're already drilling down and checking for inertness\n      //  on the way down, so all containers to this root node should have already been\n      //  vetted as non-inert\n      const validShadowRoot =\n        !isInert(shadowRoot, false) &&\n        (!options.shadowRootFilter || options.shadowRootFilter(element));\n\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        const nestedCandidates = getCandidatesIteratively(\n          shadowRoot === true ? element.children : shadowRoot.children,\n          true,\n          options\n        );\n\n        if (options.flatten) {\n          candidates.push(...nestedCandidates);\n        } else {\n          candidates.push({\n            scopeParent: element,\n            candidates: nestedCandidates,\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift(...element.children);\n      }\n    }\n  }\n  return candidates;\n};\n\nconst getTabindex = function (node, isScope) {\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    //\n    // isScope is positive for custom element with shadow root or slot that by default\n    // have tabIndex -1, but need to be sorted by document order in order for their\n    // content to be inserted in the correct position\n    if (\n      (isScope ||\n        /^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) ||\n        isContentEditable(node)) &&\n      isNaN(parseInt(node.getAttribute('tabindex'), 10))\n    ) {\n      return 0;\n    }\n  }\n\n  return node.tabIndex;\n};\n\nconst sortOrderedTabbables = function (a, b) {\n  return a.tabIndex === b.tabIndex\n    ? a.documentOrder - b.documentOrder\n    : a.tabIndex - b.tabIndex;\n};\n\nconst isInput = function (node) {\n  return node.tagName === 'INPUT';\n};\n\nconst isHiddenInput = function (node) {\n  return isInput(node) && node.type === 'hidden';\n};\n\nconst isDetailsWithSummary = function (node) {\n  const r =\n    node.tagName === 'DETAILS' &&\n    Array.prototype.slice\n      .apply(node.children)\n      .some((child) => child.tagName === 'SUMMARY');\n  return r;\n};\n\nconst getCheckedRadio = function (nodes, form) {\n  for (let i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\n\nconst isTabbableRadio = function (node) {\n  if (!node.name) {\n    return true;\n  }\n  const radioScope = node.form || getRootNode(node);\n  const queryRadios = function (name) {\n    return radioScope.querySelectorAll(\n      'input[type=\"radio\"][name=\"' + name + '\"]'\n    );\n  };\n\n  let radioSet;\n  if (\n    typeof window !== 'undefined' &&\n    typeof window.CSS !== 'undefined' &&\n    typeof window.CSS.escape === 'function'\n  ) {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s',\n        err.message\n      );\n      return false;\n    }\n  }\n\n  const checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\n\nconst isRadio = function (node) {\n  return isInput(node) && node.type === 'radio';\n};\n\nconst isNonTabbableRadio = function (node) {\n  return isRadio(node) && !isTabbableRadio(node);\n};\n\n// determines if a node is ultimately attached to the window's document\nconst isNodeAttached = function (node) {\n  // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // To further complicate things, we have to look all the way up until we find a shadow HOST\n  //  that is attached (or find none) because the node might be in nested shadows...\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n  // NOTE: If `nodeRootHost` or `node` happens to be the `document` itself (which is possible\n  //  if a tabbable/focusable node was quickly added to the DOM, focused, and then removed\n  //  from the DOM as in https://github.com/focus-trap/focus-trap-react/issues/905), then\n  //  `ownerDocument` will be `null`, hence the optional chaining on it.\n  let nodeRoot = node && getRootNode(node);\n  let nodeRootHost = nodeRoot?.host;\n\n  // in some cases, a detached node will return itself as the root instead of a document or\n  //  shadow root object, in which case, we shouldn't try to look further up the host chain\n  let attached = false;\n  if (nodeRoot && nodeRoot !== node) {\n    attached = !!(\n      nodeRootHost?.ownerDocument?.contains(nodeRootHost) ||\n      node?.ownerDocument?.contains(node)\n    );\n\n    while (!attached && nodeRootHost) {\n      // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,\n      //  which means we need to get the host's host and check if that parent host is contained\n      //  in (i.e. attached to) the document\n      nodeRoot = getRootNode(nodeRootHost);\n      nodeRootHost = nodeRoot?.host;\n      attached = !!nodeRootHost?.ownerDocument?.contains(nodeRootHost);\n    }\n  }\n\n  return attached;\n};\n\nconst isZeroArea = function (node) {\n  const { width, height } = node.getBoundingClientRect();\n  return width === 0 && height === 0;\n};\nconst isHidden = function (node, { displayCheck, getShadowRoot }) {\n  // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n\n  const isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  const nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  }\n\n  if (\n    !displayCheck ||\n    displayCheck === 'full' ||\n    displayCheck === 'legacy-full'\n  ) {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      const originalNode = node;\n      while (node) {\n        const parentElement = node.parentElement;\n        const rootNode = getRootNode(node);\n        if (\n          parentElement &&\n          !parentElement.shadowRoot &&\n          getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n\n      node = originalNode;\n    }\n    // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n    if (isNodeAttached(node)) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    }\n\n    // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n    //\n    // v6.0.0: As of this major release, the default 'full' option __no longer treats detached\n    //  nodes as visible with the 'none' fallback.__\n    if (displayCheck !== 'legacy-full') {\n      return true; // hidden\n    }\n    // else, fallback to 'none' mode and consider the node visible\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  }\n\n  // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume\n  //  it's visible\n  return false;\n};\n\n// form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\nconst isDisabledFromFieldset = function (node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    let parentNode = node.parentElement;\n    // check if `node` is contained in a disabled <fieldset>\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (let i = 0; i < parentNode.children.length; i++) {\n          const child = parentNode.children.item(i);\n          // when the first <legend> (in document order) is found\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *')\n              ? true\n              : !child.contains(node);\n          }\n        }\n        // the disabled <fieldset> containing `node` has no <legend>\n        return true;\n      }\n      parentNode = parentNode.parentElement;\n    }\n  }\n\n  // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n  return false;\n};\n\nconst isNodeMatchingSelectorFocusable = function (options, node) {\n  if (\n    node.disabled ||\n    // we must do an inert look up to filter out any elements inside an inert ancestor\n    //  because we're limited in the type of selectors we can use in JSDom (see related\n    //  note related to `candidateSelectors`)\n    isInert(node) ||\n    isHiddenInput(node) ||\n    isHidden(node, options) ||\n    // For a details element with a summary, the summary element gets the focus\n    isDetailsWithSummary(node) ||\n    isDisabledFromFieldset(node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isNodeMatchingSelectorTabbable = function (options, node) {\n  if (\n    isNonTabbableRadio(node) ||\n    getTabindex(node) < 0 ||\n    !isNodeMatchingSelectorFocusable(options, node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isValidShadowRootTabbable = function (shadowHostNode) {\n  const tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  }\n  // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n  return false;\n};\n\n/**\n * @param {Array.<Element|CandidateScope>} candidates\n * @returns Element[]\n */\nconst sortByOrder = function (candidates) {\n  const regularTabbables = [];\n  const orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    const isScope = !!item.scopeParent;\n    const element = isScope ? item.scopeParent : item;\n    const candidateTabindex = getTabindex(element, isScope);\n    const elements = isScope ? sortByOrder(item.candidates) : element;\n    if (candidateTabindex === 0) {\n      isScope\n        ? regularTabbables.push(...elements)\n        : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements,\n      });\n    }\n  });\n\n  return orderedTabbables\n    .sort(sortOrderedTabbables)\n    .reduce((acc, sortable) => {\n      sortable.isScope\n        ? acc.push(...sortable.content)\n        : acc.push(sortable.content);\n      return acc;\n    }, [])\n    .concat(regularTabbables);\n};\n\nconst tabbable = function (el, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorTabbable.bind(null, options),\n      flatten: false,\n      getShadowRoot: options.getShadowRoot,\n      shadowRootFilter: isValidShadowRootTabbable,\n    });\n  } else {\n    candidates = getCandidates(\n      el,\n      options.includeContainer,\n      isNodeMatchingSelectorTabbable.bind(null, options)\n    );\n  }\n  return sortByOrder(candidates);\n};\n\nconst focusable = function (el, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorFocusable.bind(null, options),\n      flatten: true,\n      getShadowRoot: options.getShadowRoot,\n    });\n  } else {\n    candidates = getCandidates(\n      el,\n      options.includeContainer,\n      isNodeMatchingSelectorFocusable.bind(null, options)\n    );\n  }\n\n  return candidates;\n};\n\nconst isTabbable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorTabbable(options, node);\n};\n\nconst focusableCandidateSelector = /* #__PURE__ */ candidateSelectors\n  .concat('iframe')\n  .join(',');\n\nconst isFocusable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorFocusable(options, node);\n};\n\nexport { tabbable, focusable, isTabbable, isFocusable };\n"]},"metadata":{},"sourceType":"module"}